/*
 * Created on 2019-05-04 ( Date ISO 2019-05-04 - Time 23:46:25 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */

package org.demo.persistence.impl.jdbc;

import org.codehaus.cargo.container.property.User;
import org.demo.data.record.UserRecord;
import org.demo.persistence.UserPersistence;
import org.demo.persistence.impl.jdbc.commons.GenericJdbcDAO;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

/**
 * User persistence implementation
 *
 * @author Telosys
 */

public class UserPersistenceJdbc extends GenericJdbcDAO<UserRecord> implements UserPersistence {

  private static final String SQL_SELECT_ALL = "select id, name, email, password, role from user";

  private static final String SQL_SELECT =
      "select id, name, email, password, role from user where id = ?";

  private static final String SQL_SELECT_BY_EMAIL =
          "select id, name, email, password, role from user where email = ?";

  private static final String SQL_INSERT =
      "insert into user ( name, email, password, role ) values ( ?, ?, ?, ? )";

  private static final String SQL_UPDATE =
      "update user set name = ?, email = ?, password = ?, role = ? where id = ?";

  private static final String SQL_DELETE = "delete from user where id = ?";

  private static final String SQL_COUNT_ALL = "select count(*) from user";

  private static final String SQL_COUNT = "select count(*) from user where email = ?";

  // ----------------------------------------------------------------------
  /** DAO constructor */
  public UserPersistenceJdbc() {
    super();
  }

  // ----------------------------------------------------------------------
  @Override
  protected void setAutoIncrementedKey(UserRecord record, long value) {
    record.setId((Integer) (int)value);
  }

  // ----------------------------------------------------------------------
  @Override
  protected void setValuesForPrimaryKey(PreparedStatement ps, int i, UserRecord user)
      throws SQLException {
    // --- Set PRIMARY KEY from bean to PreparedStatement ( SQL "WHERE key=?, ..." )
    setValue(ps, i++, user.getId()); // "id" : java.lang.Integer
  }

  // ----------------------------------------------------------------------

  @Override
  protected void setValuesForInsert(PreparedStatement ps, int i, UserRecord user)
      throws SQLException {
    // --- Set PRIMARY KEY and DATA from bean to PreparedStatement ( SQL "SET x=?, y=?, ..." )
    // "id" is auto-incremented => no set in insert
    setValue(ps, i++, user.getName()); // "name" : java.lang.String
    setValue(ps, i++, user.getEmail()); // "email" : java.lang.String
    setValue(ps, i++, user.getPassword()); // "password" : java.lang.String
    setValue(ps, i++, user.getRole()); // "role" : java.lang.String
  }

  // ----------------------------------------------------------------------
  @Override
  protected void setValuesForUpdate(PreparedStatement ps, int i, UserRecord user)
      throws SQLException {
    // --- Set DATA from bean to PreparedStatement ( SQL "SET x=?, y=?, ..." )
    setValue(ps, i++, user.getName()); // "name" : java.lang.String
    setValue(ps, i++, user.getEmail()); // "email" : java.lang.String
    setValue(ps, i++, user.getPassword()); // "password" : java.lang.String
    setValue(ps, i++, user.getRole()); // "role" : java.lang.String
    // --- Set PRIMARY KEY from bean to PreparedStatement ( SQL "WHERE key=?, ..." )
    setValue(ps, i++, user.getId()); // "id" : java.lang.Integer
  }

  // ----------------------------------------------------------------------
  /**
   * Creates a new instance of the bean and populates it with the given primary value(s)
   *
   * @param id;
   * @return the new instance
   */
  private UserRecord newInstanceWithPrimaryKey(Integer id) {
    UserRecord user = new UserRecord();
    user.setId(id);
    return user;
  }

  // ----------------------------------------------------------------------
  @Override
  protected UserRecord newInstance() {
    return new UserRecord();
  }

  // ----------------------------------------------------------------------
  @Override
  protected UserRecord populateBean(ResultSet rs, UserRecord user) throws SQLException {

    // --- Set data from ResultSet to Bean attributes
    user.setId(rs.getInt("id")); // java.lang.Integer
    if (rs.wasNull()) {
      user.setId(null);
    }
      // not primitive number => keep null value if any
    user.setName(rs.getString("name")); // java.lang.String
    user.setEmail(rs.getString("email")); // java.lang.String
    user.setPassword(rs.getString("password")); // java.lang.String
    user.setRole(rs.getString("role")); // java.lang.String
    return user;
  }

  // ----------------------------------------------------------------------
  /* (non-Javadoc)
   * @see interface
   */
  @Override
  public UserRecord findById(Integer id) {
    UserRecord user = newInstanceWithPrimaryKey(id);
    if (super.doSelect(user)) {
      return user;
    } else {
      return null; // Not found
    }
  }

  @Override
  public UserRecord findByEmail(String email) {
    Connection conn = null;
    UserRecord result = null;
    try {
      conn = getConnection();
      PreparedStatement ps = conn.prepareStatement(SQL_SELECT_BY_EMAIL);
      // --- Set the PRIMARY KEY ( SQL "WHERE ..." )
      setValue(ps, INITIAL_POSITION, email);
      // --- Execute SQL SELECT
      ResultSet rs = ps.executeQuery();
      if (rs.next()) {
        result = newInstance();
        populateBean(rs, result);
      }
      rs.close();
      ps.close();
    } catch (SQLException e) {
      throw new RuntimeException(e);
    } finally {
      closeConnection(conn);
    }
    return result;
  }

  // ----------------------------------------------------------------------
  /* (non-Javadoc)
   * @see interface
   */
  @Override
  public List<UserRecord> findAll() {
    return super.doSelectAll();
  }

  // ----------------------------------------------------------------------
  /**
   * Loads the given bean, it is supposed to contains the primary key value(s) in its attribute(s)
   * <br>
   * If found, the given instance is populated with the values retrieved from the database<br>
   * If not found, the given instance remains unchanged
   *
   * @param user
   * @return true if found, false if not found
   */
  // @Override
  public boolean load(UserRecord user) {
    return super.doSelect(user);
  }

  // ----------------------------------------------------------------------
  /**
   * Inserts the given bean in the database
   *
   * @param user
   */
  public long insert(UserRecord user) {
    Long key = super.doInsertAutoIncr(user);
    return key.longValue();
  }

  // ----------------------------------------------------------------------
  /* (non-Javadoc)
   * @see interface
   */
  @Override
  public UserRecord create(UserRecord user) {
    insert(user);
    return user;
  }

  // ----------------------------------------------------------------------
  /* (non-Javadoc)
   * @see interface
   */
  @Override
  public boolean update(UserRecord user) {
    int r = super.doUpdate(user);
    return r > 0;
  }

  // ----------------------------------------------------------------------
  /* (non-Javadoc)
   * @see interface
   */
  @Override
  public UserRecord save(UserRecord user) {
    if (super.doExists(user)) {
      super.doUpdate(user);
    } else {
      super.doInsert(user);
    }
    return user;
  }

  // ----------------------------------------------------------------------
  /* (non-Javadoc)
   * @see interface
   */
  @Override
  public boolean deleteById(Integer id) {
    UserRecord user = newInstanceWithPrimaryKey(id);
    int r = super.doDelete(user);
    return r > 0;
  }

  // ----------------------------------------------------------------------
  /* (non-Javadoc)
   * @see interface
   */
  @Override
  public boolean delete(UserRecord user) {
    int r = super.doDelete(user);
    return r > 0;
  }

  // ----------------------------------------------------------------------
  /**
   * Checks the existence of a record in the database using the given primary key value(s)
   *
   * @param id;
   * @return
   */
  // @Override
  public boolean exists(Integer id) {
    UserRecord user = newInstanceWithPrimaryKey(id);
    return super.doExists(user);
  }
  // ----------------------------------------------------------------------
  /**
   * Checks the existence of the given bean in the database
   *
   * @param user
   * @return
   */
  // @Override
  public boolean exists(UserRecord user) {
    return super.doExists(user);
  }


  // ----------------------------------------------------------------------
  /**
   * Counts all the records present in the database
   *
   * @return
   */
  @Override
  public long countAll() {
    return super.doCountAll();
  }

  // ----------------------------------------------------------------------
  @Override
  protected String getSqlSelect() {
    return SQL_SELECT;
  }
  // ----------------------------------------------------------------------
  @Override
  protected String getSqlSelectAll() {
    return SQL_SELECT_ALL;
  }
  // ----------------------------------------------------------------------
  @Override
  protected String getSqlInsert() {
    return SQL_INSERT;
  }
  // ----------------------------------------------------------------------
  @Override
  protected String getSqlUpdate() {
    return SQL_UPDATE;
  }
  // ----------------------------------------------------------------------
  @Override
  protected String getSqlDelete() {
    return SQL_DELETE;
  }
  // ----------------------------------------------------------------------
  @Override
  protected String getSqlCount() {
    return SQL_COUNT;
  }
  // ----------------------------------------------------------------------
  @Override
  protected String getSqlCountAll() {
    return SQL_COUNT_ALL;
  }
}
